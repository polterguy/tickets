
/*
 * Template for HTTP GET CRUD requests.
 * This file was automatically generated using Magic's CRUDifier.
 */
.arguments
   limit:long
   offset:long
   order:string
   direction:string
   tickets.id.eq:long
   tickets.status.eq:string
   tickets.department.eq:string
   tickets.title.like:string
   tickets.description.like:string
.description:Returns items from your tickets table in your [generic|tickets] database according to the specified arguments
.type:crud-read

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root, admin, guest

// Opening up our database connection.
data.connect:[generic|tickets]

   /*
    * Checking if user is root or admin, and if not, making sure he can only
    * retrieve tickets belonging to himself.
    */
   if
      and
         not
            auth.ticket.in-role:root
         not
            auth.ticket.in-role:admin
      .lambda
      
         // Ensuring user can only retrieve messages belonging to his own ticket(s).
         auth.ticket.get
         unwrap:x:+/*/*
         add:x:@data.connect/*/data.read/*/where/*/and
            .
               tickets.user.eq:x:@auth.ticket.get

   // Parametrising our read invocation.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*

   // Checking if we're using MySQL, at which point we've RIGHT joins.
   if
      eq
         config.get:"magic:databases:default"
         .:sqlite
      .lambda

         // Reading data from database.
         data.read
            table:tickets
            columns
               tickets.id
               tickets.user
               tickets.status
               tickets.department
               tickets.title
               tickets.description
               tickets.priority
               tickets.created
            where
               and

         // Returning result of above read invocation to caller.
         return-nodes:x:@data.read/*

   else

      // Reading data from database.
      data.read
         table:tickets
            join:messages
               type:left
               on
                  and
                     tickets.id.eq:messages.ticket
         columns
            tickets.id
            tickets.user
            tickets.status
            tickets.department
            tickets.title
            tickets.description
            tickets.priority
            tickets.created
            max(messages.created)
               as:last_activity
         where
            and
         group
            tickets.id

      // Returning result of above read invocation to caller.
      return-nodes:x:@data.read/*
