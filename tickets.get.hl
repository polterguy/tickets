
/*
 * Template for HTTP GET CRUD requests.
 * This file was automatically generated using Magic's CRUDifier.
 */
.arguments
   limit:long
   offset:long
   order:string
   direction:string
   tickets.id.eq:long
   tickets.status.eq:string
   tickets.department.eq:string
   tickets.title.like:string
   tickets.service.like:string
   tickets.description.like:string
   tickets.user.eq:string
.description:Returns items from your tickets table in your [generic|tickets] database according to the specified arguments
.type:crud-read

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root, admin, guest

// Defaulting sorting to created/descending
if
   not
      exists:x:@.arguments/*/order
   .lambda
      add:x:../*/data.connect/*/data.read
         .
            order:tickets.created
            direction:desc

// Opening up our database connection.
data.connect:[generic|tickets]

   /*
    * Checking if user is root or admin, and if not, making sure he can only
    * retrieve tickets belonging to himself.
    */
   if
      and
         not
            auth.ticket.in-role:root
         not
            auth.ticket.in-role:admin
      .lambda
      
         // Ensuring user can only retrieve messages belonging to his own ticket(s).
         auth.ticket.get
         unwrap:x:+/*/*
         add:x:@data.connect/*/data.read/*/where/*/and
            .
               tickets.user.eq:x:@auth.ticket.get
         remove-nodes:x:@.arguments/*/tickets.user.eq

   // Parametrising our read invocation.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*


   // Reading data from database.
   data.read
      table:tickets
         join:messages
            type:left
            on
               and
                  tickets.id.eq:messages.ticket
      columns
         tickets.id
         tickets.user
         tickets.status
         tickets.department
         tickets.title
         tickets.description
         tickets.priority
         tickets.created
         tickets.service
         max(messages.created)
            as:last_activity
      where
         and
      group
         tickets.id

   // Storing our result in a temporary result node.
   .result
   add:x:-
      get-nodes:x:@data.read/*

   // Iterating through each result from above and finding out if files exists for item.
   for-each:x:@.result/*
      strings.concat
         .:/etc/tickets/tickets/id-
         get-value:x:@.dp/#/*/id
         .:/
      if
         io.folder.exists:x:@strings.concat
         .lambda
            add:x:@.dp/#
               .
                  has_files:bool:true
      else
         add:x:@.dp/#
            .
               has_files:bool:false

   // Caching for a handful of seconds.
   response.headers.set
      Cache-Control:private, max-age=5

   // Returning result of above read invocation to caller.
   return-nodes:x:@.result/*
